<!-- Apache Ant Build Config -->
<project name="Game">

<!-- Properties -->

  <property name="build.sysclasspath" value="ignore"/>
  <property name="gamedata.dir" value="." />

  <property name="src.dir" value="src" />
  <property name="bin.dir" value="bin" />
  <property name="tools.dir" value="tools" />
  <property name="res.dir" value="${gamedata.dir}/res" />
  <property name="build-res.dir" value="${gamedata.dir}/build-res" />
  <property name="docs.dir" location="${gamedata.dir}/docs" />
  <property name="dist.dir" value="${gamedata.dir}/dist" />

  <property file="${build-res.dir}/build.properties"/>
  <property file="${res.dir}/game.ini"/>

  <!-- Ensure required properties exist -->
  <fail>
    <condition>
    <or>
        <not><isset property="project-name"/></not>
        <not><isset property="main-class"/></not>
        <not><isset property="exclude-libs"/></not>
        <not><isset property="program-args"/></not>
      </or>
    </condition>
  </fail>

  <script language="javascript">
    <![CDATA[
      project.setProperty("project-name-url", escape(project.getProperty("project-name")));
	
	  if (project.getProperty("gamedata.dir") == ".") {
		  project.setProperty("jar-lib-basedir", "");
	  } else {
		  project.setProperty("jar-lib-basedir", "/" + escape(project.getProperty("basedir")) + "/");
	  }
    ]]>
  </script>
  
  <basename property="library.name" file="${basedir}" />
  
  <path id="javasrc">
    <fileset dir="${src.dir}" includes="**/*.java" erroronmissingdir="false" />
  </path>
  
  <condition property="javasrc.exists">
    <resourcecount refid="javasrc" when="greater" count="0" />
  </condition>

  <path id="javabin">
    <fileset dir="${bin.dir}" includes="**" erroronmissingdir="false" />
  </path>
  
  <path id="classpath">
    <fileset dir="." includes="lib/**/*.jar" />
  </path>
    
  <!-- Absolute paths to JARs -->
  <pathconvert property="jar-classpath" pathsep=" " dirsep="/" refid="classpath">
    <map from="${basedir}/" to="${jar-lib-basedir}" />
    <map from=" " to="\ " />
  </pathconvert>
  
  <!-- Relative paths to JARs -->
  <pathconvert property="jar-classpath-local" pathsep=" " dirsep="/" refid="classpath">
    <map from="${basedir}/" to="" />
    <map from=" " to="\ " />
  </pathconvert>
  
  <!-- Operating system family detection -->
  <condition property="os.family" value="windows">
    <os family="windows"/>
  </condition>
  <condition property="os.family" value="mac">
    <os family="mac"/>
  </condition>
  <condition property="os.family" value="linux">
    <os family="unix"/>
  </condition>

  <!-- Check existance of compressed JRE's -->
  <available file="${jre-win32}" property="jre.win32.exists"/>
  <available file="${jre-mac}"   property="jre.mac.exists"  />
  <available file="${jre-linux}" property="jre.linux.exists"/>
  
<!-- Imports -->
  
<!-- Tasks -->

  <taskdef name="launch4j"
           classname="net.sf.launch4j.ant.Launch4jTask"
           classpath="${tools.dir}/launch4j/launch4j.jar;${tools.dir}/launch4j/lib/xstream.jar" />
  
  <macrodef name="create-exe">
    <attribute name="dir"/>
    <attribute name="exename" default="${project-name}" />
    <attribute name="jarname" default="${project-name}" />
    <attribute name="icon"/>
    <attribute name="args" default=" "/>
    <attribute name="jvm-args" default=" "/>
    <attribute name="dontWrapJar" default="true"/>

    <sequential>
      <launch4j bindir="tools/launch4j/bin/${os.family}">
        <config headerType="gui"
            outfile="@{dir}/@{exename}.exe" jarPath="@{jarname}.jar"
            dontWrapJar="@{dontWrapJar}" icon="@{icon}" cmdLine="@{args}">
          <jre minVersion="1.6.0" path="jre-win32">
            <opt>@{jvm-args}</opt> <!-- Need to use a macro variable, opt element doesn't support variable expansion -->
          </jre>
        </config>
      </launch4j>
    </sequential>
  </macrodef>
              
  <macrodef name="create-launchers">
    <attribute name="dir" default="." />
    <attribute name="extra-args" default="" />

    <sequential>
      <copy todir="@{dir}" overwrite="true">
        <fileset dir="build-res/launcher" />
        <filterChain>
          <replacetokens>
            <token key="ARGS" value="-id &quot;${project-name}&quot; @{extra-args} ${program-args}"/>
          </replacetokens>        
          <expandProperties />
        </filterChain>
      </copy>

      <!-- Create launcher scripts -->      
      <chmod dir="${gamedata.dir}" includes="*.sh,*.command" perm="ugo+rx"/>
                    
      <!-- Create a win32 executable -->
      <create-exe dir="@{dir}" icon="${res.dir}/icon.ico" jvm-args="${jvm-args} ${jvm-args-win}"
            args="-id &quot;${project-name}&quot; @{extra-args} ${program-args}" />
          
      <!-- Create a win64 executable -->
      <!-- <create-exe dir="@{dir}" icon="${res.dir}/icon.ico" jvm-args="${jvm-args} ${jvm-args-win}"
            exename="${project-name}-64" args="-id &quot;${project-name}&quot; @{extra-args} ${program-args}" /> -->
    </sequential>    
  </macrodef>
  
  <macrodef name="extract-installer-chunk">
    <attribute name="src" />
    <attribute name="dst" />

    <sequential>
      <java classname="nl.weeaboo.installer.CompressionUtil" classpath="${tools.dir}/MakeInstaller.jar" fork="true">
        <arg value="-d" />
        <arg value="@{src}" />
        <arg value="@{dst}" />
      </java>    
    </sequential>
  </macrodef>

  <taskdef name="p200"
    classname="de.matthiasmann.p200ant.P200AntTask"
    classpath="${tools.dir}/p200ant/p200ant.jar" />  

<!-- Targets -->

  <target name="main" depends="jar" />
  
<!-- ====================================================================== -->
<!-- === Basic Targets ==================================================== -->
<!-- ====================================================================== -->

  <target name="init">        
    <tstamp />
  </target>

  <!-- Remove all generated resources -->
  <target name="clean" depends="init">
    <delete dir="${bin.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${gamedata.dir}/${project-name}.app" />
    <delete file="${gamedata.dir}/${project-name}.exe" quiet="true" />
    <delete file="${gamedata.dir}/${project-name}-64.exe" quiet="true" />
    <delete file="${gamedata.dir}/${project-name}.jar" />
    <delete dir="${gamedata.dir}" includes="run*.bat,run*.sh,run*.command,run*.jnlp" />
  </target>

<!-- ====================================================================== -->
<!-- === Compile Targets ================================================== -->
<!-- ====================================================================== -->
  
  <!-- Compile source files -->
  <target name="compile" depends="init" if="javasrc.exists">
    <mkdir dir="${bin.dir}"/>
        
    <javac srcdir="${src.dir}" destdir="${bin.dir}"
      source="1.6" target="1.6"
      encoding="UTF-8" debug="true" includeantruntime="false">
      
      <classpath refid="classpath" />
    </javac>

    <!-- Copy resources (embedded images, etc.) to bin dir -->
    <copy todir="${bin.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>
  </target>
  
  <!-- Do a clean compile and generate the main jar -->
  <target name="jar" depends="compile">
  	<delete file="${gamedata.dir}/${project-name}.jar" />
  	
    <jar destfile="${gamedata.dir}/${project-name}.jar">    	
      <manifest>
        <attribute name="Class-Path" value="${jar-classpath}"/>
        <attribute name="Main-Class" value="${main-class}"/>
        <attribute name="Implementation-Version" value="${DSTAMP}"/>
        <attribute name="SplashScreen-Image" value="${splashscreen}"/>
      </manifest>
      
      <path refid="javabin" />
      <fileset dir="." includes="license.txt" />
      <fileset dir="${build-res.dir}" includes="${splashscreen}" />      
    </jar> 
  	
    <create-launchers dir="${gamedata.dir}" extra-args="&quot;${gamedata.dir}&quot;" />  	
  </target>

<!-- ====================================================================== -->
<!-- === Javadoc Targets ================================================== -->
<!-- ====================================================================== -->
  
  <target name="doc" depends="compile">
    <javadoc destdir="${docs.dir}" sourcepath="${src.dir}" classpathref="classpath">
      <link href="http://java.sun.com/javase/6/docs/api/" />
    </javadoc>
  </target>
  
<!-- ====================================================================== -->
<!-- === Dist Targets ===================================================== -->
<!-- ====================================================================== -->
  
  <!-- Shared behavior between dist and dist-src -->
  <target name="dist-common" depends="clean,compile">
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />

    <copy todir="${dist.dir}/lib">
      <fileset dir="lib" excludes="${exclude-libs}" />
    </copy>
    <copy todir="${dist.dir}/res">
      <fileset dir="${res.dir}" />
    </copy>
  </target>

  <!-- Prepare the dist folder for source code distribution -->
  <target name="dist-src" depends="dist-common">
    <copy todir="${dist.dir}/build-res">
      <fileset dir="build-res" />
    </copy>
    <copy todir="${dist.dir}/tools">
      <fileset dir="${tools.dir}" />
    </copy>    
    <copy todir="${dist.dir}/src">
      <fileset dir="src" />
    </copy>
    <copy todir="${dist.dir}">
      <fileset dir="." includes="build*.xml,*license.txt" />
    </copy>
  </target>

  <!-- Prepare the dist folder for library distribution -->
  <target name="dist-lib" depends="dist-src">
    <!-- Delete src folder we don't need -->
    <delete includeEmptyDirs="true">
      <fileset dir="${dist.dir}/src" includes="**/*" />
    </delete>
  
    <!-- Copy extra-dist-files to the main folder -->
    <copy todir="${dist.dir}">
      <fileset dir="${build-res.dir}/extra-dist-files" />
    </copy>
    
    <!-- Move Build.jar to the main folder -->
    <move todir="${dist.dir}">
      <fileset dir="${dist.dir}/tools" includes="Build*.*" />
    </move>
    
    <!-- Create library JAR file -->
    <jar destfile="${dist.dir}/lib/${library.name}.jar">
      <manifest>
        <attribute name="Implementation-Version" value="${DSTAMP}"/>
      </manifest>
      <path refid="javabin" />
      <fileset file="license.txt" />
    </jar>
  </target>
  
  <!-- Decompresses and adds JRE to the dist folder -->
  <target name="dist-jre-win32" if="${jre.win32.exists}">
    <extract-installer-chunk src="${jre-win32}" dst="${dist.dir}" />
  </target>
  <target name="dist-jre-mac" if="${jre.mac.exists}">
    <extract-installer-chunk src="${jre-mac}" dst="${dist.dir}" />
  </target>
  <target name="dist-jre-linux" if="${jre.linux.exists}">
    <extract-installer-chunk src="${jre-linux}" dst="${dist.dir}" />
  </target>
  <target name="dist-jre" if="${include-private-jre}">
    <antcall target="dist-jre-win32" />
    <antcall target="dist-jre-mac" />
    <antcall target="dist-jre-linux" />
  </target>
  
  <target name="clean-dist-jre">
    <delete includeemptydirs="true">
      <fileset dir="${dist.dir}" includes="jre-*/**" />
    </delete>
  </target>
  
  <!-- Prepare the dist folder for end-user distribution -->
  <target name="dist" depends="dist-common">
    <!-- ZIP source code -->
    <zip basedir="src" destfile="${dist.dir}/${project-name}-src.zip" />
    <delete file="${dist.dir}/src" />
  
    <!-- Copy extra-dist-files to the main folder -->
    <copy todir="${dist.dir}">
      <fileset dir="${build-res.dir}/extra-dist-files" />
    </copy>
      
    <!-- Zippable resources -->
    <path id="zippableFiles">
      <dirset dir="${dist.dir}/res" />
      <fileset dir="${dist.dir}/res" /> 
      <!-- <fileset dir="${dist.dir}/res" excludes="video*/**" /> 
      <fileset dir="${dist.dir}/res" includes="video*/**/*.ogv,video*/**/*.ogg" /> -->
    </path>
  
    <!-- Compress res folder to res.zip, excluding video files -->
    <!-- There's a bug in ant that causes a "Warning: skipping zip archive ??? because no files were included." -->
    <zip destfile="${dist.dir}/res.zip" compress="false" encoding="UTF-8">
      <path refid="zippableFiles" />
    </zip>
        
    <delete includeemptydirs="true">
      <path refid="zippableFiles" />
    </delete>
    <delete file="${dist.dir}/res" />
    
    <!-- Create JAR and launchers in dist folder -->
    <jar destfile="${dist.dir}/${project-name}.jar">
      <manifest>
        <attribute name="Class-Path" value="${jar-classpath-local}"/>
        <attribute name="Main-Class" value="${main-class}"/>
        <attribute name="Implementation-Version" value="${DSTAMP}"/>
      </manifest>
      
      <path refid="javabin" />
      <fileset file="license.txt" />
    </jar>
  	
    <create-launchers dir="${dist.dir}" />    
  </target>
    
</project>
