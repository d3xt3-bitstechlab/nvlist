<!-- Apache Ant Build Config -->
<project name="Game-Distro">

<!-- Properties -->
  <fail>
    <condition>
      <or>
        <not><isset property="project-name"/></not>
        <not><isset property="main-class"/></not>
        <not><isset property="dist.dir"/></not>
        <not><isset property="gamedata.dir"/></not>
        <not><isset property="tools.dir"/></not>
      </or>
    </condition>
  </fail>

  <property name="releases.dir" value="${gamedata.dir}/releases" />
  <property name="executable-filter" value="**/*.jar, **/*.exe, **/*.bat, **/*.sh, **/*.command" />
  
<!-- Imports -->
  
<!-- Tasks -->
  <macrodef name="create-application-bundle7">
    <attribute name="dir" default="${dist.dir}" />
	
    <sequential>
	  <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"   
		   classpath="${tools.dir}/appbundler/appbundler-1.0.jar" />
			   
      <mkdir dir="@{dir}" />

      <java classname="nl.weeaboo.installer.CompressionUtil" classpath="${tools.dir}/MakeInstaller.jar" fork="true">        
        <arg value="-d" />
        <arg value="build-res/jdk-mac.xz" />
        <arg value="@{dir}" />
      </java>
      
      <bundleapp
        outputdirectory="@{dir}"
        name="${project-name}"
        displayname="${title}"
        icon="${res.dir}/icon.icns"
        identifier="${package}"
        mainclassname="${main-class}">
        
        <runtime dir="@{dir}/jdk-mac/Contents/Home" erroronmissingdir="false" />
        
        <classpath dir="lib" includes="**/*.jar" />
        <classpath dir="${dist.dir}" includes="${project-name}.jar" />

        <option value="${jvm-args}" />
        
        <argument value="-reparseArgs -id &quot;${project-name}&quot; ${program-args}" />
        <argument value="$APP_ROOT/Contents/Resources" />        
      </bundleapp>

      <copy todir="@{dir}/${project-name}.app/Contents/Resources">
        <fileset dir="${dist.dir}/res" erroronmissingdir="false" />
        <fileset dir="${dist.dir}/lib/mac" erroronmissingdir="false" />
        <fileset dir="${dist.dir}" includes="*.zip,*.nvl" />
      </copy>	
	</sequential>
  </macrodef>

  <macrodef name="create-application-bundle6">
    <attribute name="dir" default="${dist.dir}" />
    
    <sequential>
	  <!-- Create Mac OSX launcher with JarBundler -->
	  <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler"
			   classpath="${tools.dir}/jarbundler/jarbundler-2.2.0.jar" />
		   
      <chmod dir="${build-res.dir}/mac" includes="JavaApplicationStub*" perm="ugo+rx"/>
      
      <jarbundler dir="@{dir}"
        name="${project-name}"
        mainclass="${main-class}"
        icon="${res.dir}/icon.icns"
        stubfile="${build-res.dir}/mac/JavaApplicationStub"
        jvmversion="1.6+"
        jvmarchs="x86_64 i386 ppc"
        vmoptions="${jvm-args}"
        arguments="-reparseArgs -id &quot;${project-name}&quot; ${program-args} $APP_PACKAGE/Contents/Resources">
          
        <jarfileset dir="lib" includes="**/*.jar" />
        <jarfilelist dir="${dist.dir}" >
          <file name="${project-name}.jar" />
        </jarfilelist>
        
        <javafileset dir="lib/mac" />
        
        <resourcefileset dir="${dist.dir}/res" erroronmissingdir="false" />
        <resourcefileset dir="${dist.dir}" includes="*.zip,*.nvl" />
      </jarbundler>
    </sequential>
  </macrodef>

  <macrodef name="create-installer-exe">
    <attribute name="src" />
    <attribute name="dst" />

    <sequential>
      <!-- Create a .bmp version of the splash screen -->
      <script language="javascript">
        <![CDATA[
          var splashFolder = project.getProperty("build-res.dir")
          var img = javax.imageio.ImageIO.read(new java.io.File(splashFolder, project.getProperty("splashscreen")));
          if (img != null) {
            var opaque = new java.awt.image.BufferedImage(img.getWidth(), img.getHeight(), java.awt.image.BufferedImage.TYPE_3BYTE_BGR);
            opaque.getGraphics().drawImage(img, 0, 0, opaque.getWidth(), opaque.getHeight(), null);
            javax.imageio.ImageIO.write(opaque, "bmp", new java.io.File(splashFolder+"/splash.bmp"));
          }
        ]]>
      </script>
  
      <!-- Wrap JAR in .exe (if windows-installer-only property is set) -->
      <launch4j bindir="tools/launch4j/bin/${os.family}">
        <config headerType="gui" dontWrapJar="false" icon="${res.dir}/icon.ico"
            manifest="${build-res.dir}/installer.manifest" jarPath="@{src}" outfile="@{dst}">
          <jre minVersion="1.6.0" />
          <splash file="${build-res.dir}/splash.bmp" />
        </config>
      </launch4j>
      
      <!-- Delete splash screen .bmp -->
      <delete file="${build-res.dir}/splash.bmp" />    
    </sequential>
  </macrodef>
    
<!-- Targets -->

  <target name="clean-release">
    <delete dir="${build-res.dir}" includes="installer.ini" />	
    <delete>
      <fileset dir="${releases.dir}">
        <include name="${project-name}-*.jar" />
        <include name="${project-name}-*.zip" />
        <include name="${project-name}-*.iso" />
      </fileset>
    </delete>
  </target>
  
  <target name="release-common">
    <tstamp />
    <copy tofile="${build-res.dir}/installer.ini" file="${build-res.dir}/installer-config.ini">
      <filterChain>
        <expandProperties />
      </filterChain>
    </copy>
  </target>
  
  <!-- Creates a no-installer ZIP archive from the releases folder -->
  <!-- Doesn't depend on dist as either 'dist-src' or 'dist' may be used. -->
  <target name="release-zip" depends="release-common, dist-jre">  
    <echo>Creating no-installer ZIP archive (may take a long time)...</echo>
    
    <zip destfile="${releases.dir}/${project-name}-${DSTAMP}.zip"
            compress="true" encoding="UTF-8">
			
      <zipfileset dir="${dist.dir}" prefix="${project-name}" excludes="${executable-filter}" />
      <zipfileset dir="${dist.dir}" prefix="${project-name}" includes="${executable-filter}" filemode="755" />
    </zip>
            
    <delete file="${build-res.dir}/installer.ini" />
  </target>

  <!-- Creates a cross-platform installer JAR -->
  <target name="release-jar" depends="release-common">
    <echo>Creating installer (may take a long time)...</echo>    
    <java jar="${tools.dir}/MakeInstaller.jar" fork="true">
      <arg value="${dist.dir}" />
      <arg value="${releases.dir}/${project-name}-install-${DSTAMP}.jar" />
      <arg value="${build-res.dir}/installer.ini" />
    </java>
    <delete file="${build-res.dir}/installer.ini" />
  </target>
  
  <!-- Create an installer from the dist folder
    Doesn't depend on dist as either 'dist-src' or 'dist' may be used. -->
  <target name="release-win" depends="release-jar" if="${installer-exe}">
    <create-installer-exe src="${releases.dir}/${project-name}-install-${DSTAMP}.jar"
        dst="${releases.dir}/${project-name}-install-${DSTAMP}.exe" />
  </target>

  <target name="release-cd" depends="release-common, dist-jre">
    <echo>Creating installer (may take a long time)...</echo>
    	
    <java jar="${tools.dir}/MakeInstaller.jar" fork="true">
      <arg value="-pack-disk" />
      <arg value="${dist.dir}" />
      <arg value="${dist.dir}/CDROOT" />
      <arg value="${build-res.dir}/installer.ini" />
    </java>
    
    <create-installer-exe src="${dist.dir}/CDROOT/installer.jar" dst="${dist.dir}/CDROOT/installer.exe" />

    <!-- Create application bundle in CDROOT folder -->
    <create-application-bundle dir="${dist.dir}/CDROOT" />
    
    <!-- Package CDROOT folder -->
    <exec executable="${tools.dir}/mkisofs/${os.family}/mkisofs" resultproperty="mkisofs-result">	  
      <arg line="-J -R -hfs -iso-level 2" />
      <arg value="-V" />
      <arg value="${project-name}" />
      <!-- File hiding rules -->
      <arg line="-hidden .data -hidden *.inf" />
      <arg line="-hide *.app -hide-joliet *.app" />
      <arg line="-hide-hfs *.inf -hide-hfs *.jar" />
      <!-- Output file and inputs -->
      <arg value="-o" />
      <arg value="${releases.dir}/${project-name}-cd-${DSTAMP}.iso" />
      <arg value="${dist.dir}/CDROOT" />
    </exec>
	
    <zip destfile="${releases.dir}/${project-name}-cd-${DSTAMP}.zip" basedir="${dist.dir}/CDROOT"
            compress="false" encoding="UTF-8" />
		
	<!-- Delete temp files -->
    <delete dir="${dist.dir}/CDROOT" />
    <delete file="${build-res.dir}/installer.ini" />
  </target>

  <target name="release-mac" depends="release-common">
    <echo>Creating Mac OSX application bundle (may take a long time)...</echo>
    
    <create-application-bundle6 dir="${dist.dir}" />
	
    <!-- Zip application bundle -->
    <zip destfile="${releases.dir}/${project-name}-mac-${DSTAMP}.zip"
      compress="true" encoding="UTF-8">
			
      <zipfileset dir="${dist.dir}/${project-name}.app" prefix="${project-name}.app"
        filemode="755" includes="Contents/MacOS/**,Contents/Resources/Java/**" />
      <zipfileset dir="${dist.dir}/${project-name}.app" prefix="${project-name}.app"
        includes="**"  excludes="Contents/MacOS/**,Contents/Resources/Java/**" />
    </zip>
    <delete dir="${dist.dir}/${project-name}.app" />

    <delete file="${build-res.dir}/installer.ini" />
  </target>

  <target name="release-mac-store" depends="release-common">
    <echo>Creating Mac Store compatible application bundle (may take a long time)...</echo>
    
    <create-application-bundle7 dir="${dist.dir}" />
	
    <!-- Zip application bundle -->
    <zip destfile="${releases.dir}/${project-name}-mac-${DSTAMP}.zip"
      compress="true" encoding="UTF-8">
			
      <zipfileset dir="${dist.dir}/${project-name}.app" prefix="${project-name}.app"
        filemode="755" includes="Contents/MacOS/**,Contents/Resources/**" />
      <zipfileset dir="${dist.dir}/${project-name}.app" prefix="${project-name}.app"
        includes="**"  excludes="Contents/MacOS/**,Contents/Resources/**" />
    </zip>
    <delete dir="${dist.dir}/${project-name}.app" />

    <delete file="${build-res.dir}/installer.ini" />
  </target>
  
</project>
